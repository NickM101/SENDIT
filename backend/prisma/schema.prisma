generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String
  phone       String
  password    String
  dateOfBirth DateTime?
  address     String?
  isActive    Boolean   @default(true)
  avatarUrl   String?
  role        Role      @default(USER)
  deletedAt   DateTime?
  welcomeEmailSent Boolean @default(false)

  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLogin            DateTime?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  sentParcels            Parcel[] @relation("SenderParcels")
  receivedParcels        Parcel[] @relation("RecipientParcels")
  trackingHistory        TrackingHistory[]
  createdParcels         Parcel[] @relation("ParcelCreatedBy")
  updatedParcels         Parcel[] @relation("ParcelUpdatedBy")
  refreshToken           RefreshToken[]
  emailVerificationToken EmailVerificationToken[]
  notifications          Notification[]
  addressesCreated       Address[] @relation("AddressCreatedBy")
  addressesUpdated       Address[] @relation("AddressUpdatedBy")
  dimensionsCreated      Dimensions[] @relation("DimensionsCreatedBy")
  dimensionsUpdated      Dimensions[] @relation("DimensionsUpdatedBy")
  savedRecipients        SavedRecipient[] @relation("UserSavedRecipients")
  parcelDrafts           ParcelDraft[] @relation("UserParcelDrafts")
  CourierAssignmentsAssignedBy CourierAssignment[] @relation("AssignedByUser")
  CourierAssignmentCourier CourierAssignment[] @relation("CourierUser")

  @@index([email])
  @@index([phone])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model Address {
  id          String       @id @default(cuid())
  name        String
  email       String?
  phone       String?
  street      String
  area        String
  city        String
  county      KenyanCounty
  state       String
  zipCode     String
  country     String       @default("Kenya")
  latitude    Float?
  longitude   Float?
  isValidated Boolean      @default(false)
  validatedAt DateTime?
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String?
  updatedBy   String?

  parcelsSender    Parcel[] @relation("SenderAddress")
  parcelsRecipient Parcel[] @relation("RecipientAddress")
  createdByUser    User?    @relation("AddressCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updatedByUser    User?    @relation("AddressUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)
  savedRecipients  SavedRecipient[] @relation("RecipientAddress")

  @@index([county])
  @@index([city])
  @@index([latitude, longitude])
  @@map("addresses")
}

model SavedRecipient {
  id        String   @id @default(cuid())
  userId    String
  name      String
  email     String
  phone     String
  company   String?
  addressId String
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation("UserSavedRecipients", fields: [userId], references: [id], onDelete: Cascade)
  address Address @relation("RecipientAddress", fields: [addressId], references: [id], onDelete: Cascade)

  @@unique([userId, email, phone])
  @@index([userId, lastUsed])
  @@map("saved_recipients")
}

model Dimensions {
  id               String     @id @default(cuid())
  length           Float
  width            Float
  height           Float
  unit             DimensionUnit @default(cm)
  volumetricWeight Float?
  deletedAt        DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String?
  updatedBy        String?

  parcels          Parcel[] @relation("ParcelDimensions")
  createdByUser    User?    @relation("DimensionsCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updatedByUser    User?    @relation("DimensionsUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)

  @@map("dimensions")
}

model ParcelDraft {
  id          String   @id @default(cuid())
  userId      String
  stepData    Json
  currentStep Int      @default(1)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserParcelDrafts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([userId])
  @@index([expiresAt])
  @@map("parcel_drafts")
}

model Parcel {
  id                         String    @id @default(cuid())
  trackingNumber              String   @unique
  senderId                    String
  recipientId                 String?
  basePrice                   Float
  weightSurcharge             Float?   @default(0)
  serviceSurcharge            Float?   @default(0)
  specialHandlingSurcharge    Float?   @default(0)
  insuranceCost               Float?   @default(0)
  deliverySpeedSurcharge      Float?   @default(0)
  additionalFees              Float?   @default(0)
  subtotal                    Float
  tax                         Float
  totalPrice                  Float
  currency                    String   @default("KES")
  weight                      Float?
  weightUnit                  WeightUnit? @default(kg)
  estimatedValue              Float?
  description                 String?
  dimensionsId                String?
  senderAddressId             String
  recipientAddressId          String
  packageType                 PackageType
  deliveryType                DeliveryType @default(STANDARD)
  pickupDate                  DateTime?
  pickupTimeSlot              String?
  deliveryDate                DateTime?
  estimatedDelivery           DateTime?
  actualDelivery              DateTime?
  status                      ParcelStatus @default(PROCESSING)
  fragile                     Boolean @default(false)
  perishable                  Boolean @default(false)
  hazardousMaterial           Boolean @default(false)
  highValue                   Boolean @default(false)
  pickupInstructions          String?
  deliveryInstructions        String?
  specialHandling             String?
  packagingInstructions       String?
  insuranceCoverage           InsuranceCoverage @default(NO_INSURANCE)
  signatureRequired           Boolean @default(false)
  emailNotifications          Boolean @default(true)
  smsNotifications            Boolean @default(false)
  contactlessDelivery         Boolean @default(false)
  retryNextBusinessDay        Boolean @default(true)
  leaveWithNeighbor           Boolean @default(false)
  holdAtPickupPoint           Boolean @default(false)
  returnToSender              Boolean @default(false)
  deletedAt                   DateTime?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  createdBy                   String?
  updatedBy                   String?

  sender             User       @relation("SenderParcels", fields: [senderId], references: [id], onDelete: Cascade)
  recipient          User?      @relation("RecipientParcels", fields: [recipientId], references: [id], onDelete: SetNull)
  createdByUser      User?      @relation("ParcelCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updatedByUser      User?      @relation("ParcelUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)
  trackingHistory    TrackingHistory[]
  deliveryAttempts   DeliveryAttempt[]
  dimensions         Dimensions?  @relation("ParcelDimensions", fields: [dimensionsId], references: [id])
  senderAddress      Address      @relation("SenderAddress", fields: [senderAddressId], references: [id])
  recipientAddress   Address      @relation("RecipientAddress", fields: [recipientAddressId], references: [id])
  payments           Payment[]
  notifications      Notification[]
  pricingHistory     PricingHistory[]
  CourierAssignment  CourierAssignment[]

  @@index([trackingNumber])
  @@index([status])
  @@index([senderId])
  @@index([recipientId])
  @@index([createdAt])
  @@index([estimatedDelivery])
  @@map("parcels")
}

model PricingHistory {
  id        String   @id @default(cuid())
  parcelId  String
  step      String
  pricing   Json
  createdAt DateTime @default(now())

  parcel    Parcel   @relation(fields: [parcelId], references: [id], onDelete: Cascade)

  @@index([parcelId])
  @@map("pricing_history")
}

model TrackingHistory {
  id          String       @id @default(cuid())
  parcelId    String
  status      ParcelStatus
  location    String?
  description String?
  latitude    Float?
  longitude   Float?
  timestamp   DateTime @default(now())
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parcel        Parcel   @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  updatedByUser User?    @relation(fields: [updatedBy], references: [id], onDelete: SetNull)

  @@index([parcelId, timestamp])
  @@map("tracking_history")
}

model DeliveryAttempt {
  id           String        @id @default(cuid())
  parcelId     String
  attemptDate  DateTime      @default(now())
  status       AttemptStatus
  reason       String?
  nextAttempt  DateTime?
  courierNotes String?
  latitude     Float?
  longitude    Float?

  parcel       Parcel        @relation(fields: [parcelId], references: [id], onDelete: Cascade)

  @@index([parcelId])
  @@map("delivery_attempts")
}

model Notification {
  id            String             @id @default(cuid())
  parcelId      String?
  userId        String?
  type          NotificationType
  status        NotificationStatus
  subject       String?
  message       String?
  recipient     String?
  sentAt        DateTime?
  queuedAt      DateTime?
  failureReason String?
  retryCount    Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  parcel        Parcel?            @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  user          User?              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status, queuedAt])
  @@index([parcelId])
  @@map("notifications")
}

model Payment {
  id                    String        @id @default(cuid())
  stripePaymentIntentId String?       @unique
  amount                Float
  currency              String        @default("KES")
  status                PaymentStatus
  paymentMethod         PaymentMethod
  stripeClientSecret    String?
  parcelId              String?

  cardLast4             String?
  cardBrand             String?
  paymentIntentMetadata Json?

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  parcel                Parcel?       @relation(fields: [parcelId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([parcelId])
  @@map("payments")
}

model PickupPoint {
  id        String    @id @default(cuid())
  name      String
  type      PickupPointType
  address   String
  city      String
  county    KenyanCounty
  latitude  Float
  longitude Float
  hours     String
  phone     String?
  email     String?
  services  String[]
  rating    Float? @default(0)
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([county, city])
  @@index([latitude, longitude])
  @@index([isActive])
  @@map("pickup_points")
}

model CourierAssignment {
  id             String   @id @default(cuid())
  parcelId       String   @unique
  courierId      String
  assignedBy     String
  assignedAt     DateTime @default(now())
  status         CourierAssignmentStatus @default(ACTIVE)
  completedAt    DateTime?

  parcel         Parcel   @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  courier        User     @relation("CourierUser", fields: [courierId], references: [id], onDelete: Cascade)
  assignedByUser User     @relation("AssignedByUser", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@map("courier_assignments")
}

// Enums
enum Role {
  USER
  ADMIN
  COURIER
}

enum ParcelStatus {
  DRAFT
  PROCESSING
  PAYMENT_PENDING
  PAYMENT_CONFIRMED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  DELAYED
  RETURNED
  CANCELLED
  REFUNDED
}

enum PackageType {
  STANDARD_BOX
  DOCUMENT
  CLOTHING
  ELECTRONICS
  FRAGILE
  LIQUID
  PERISHABLE
}

enum DeliveryType {
  STANDARD
  EXPRESS
  SAME_DAY
  OVERNIGHT
}

enum InsuranceCoverage {
  NO_INSURANCE
  BASIC_COVERAGE
  PREMIUM_COVERAGE
  CUSTOM_COVERAGE
}

enum AttemptStatus {
  SUCCESSFUL
  FAILED_NO_ONE_HOME
  FAILED_INCORRECT_ADDRESS
  FAILED_REFUSED
  FAILED_WEATHER
  FAILED_OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  MPESA
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  WEBHOOK
}

enum NotificationStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  FAILED
  RETRY
}

enum WeightUnit {
  kg
  lb
  g
  oz
}

enum DimensionUnit {
  cm
  in
  m
  ft
}

enum PickupPointType {
  SENDIT_CENTER
  PARTNER_LOCATION
  MALL_LOCKER
  POST_OFFICE
  RETAIL_STORE
}

enum CourierAssignmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum KenyanCounty {
  BARINGO
  BOMET
  BUNGOMA
  BUSIA
  ELGEYO_MARAKWET
  EMBU
  GARISSA
  HOMA_BAY
  ISIOLO
  KAJIADO
  KAKAMEGA
  KERICHO
  KIAMBU
  KILIFI
  KIRINYAGA
  KISII
  KISUMU
  KITUI
  KWALE
  LAIKIPIA
  LAMU
  MACHAKOS
  MAKUENI
  MANDERA
  MARSABIT
  MERU
  MIGORI
  MOMBASA
  MURANGA
  NAIROBI
  NAKURU
  NANDI
  NAROK
  NYAMIRA
  NYANDARUA
  NYERI
  SAMBURU
  SIAYA
  TAITA_TAVETA
  TANA_RIVER
  THARAKA_NITHI
  TRANS_NZOIA
  TURKANA
  UASIN_GISHU
  VIHIGA
  WAJIR
  WEST_POKOT
}
