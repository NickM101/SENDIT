generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique // Must be a valid email format (e.g., user@example.com)
  name        String
  phone       String    // Must match phone number format (e.g., +1234567890)
  password    String
  dateOfBirth DateTime?
  address     String?
  isActive    Boolean   @default(true)
  avatarUrl   String?
  role        Role      @default(USER)
  deletedAt   DateTime? // Soft delete
  welcomeEmailSent Boolean @default(false) // Track if welcome email was sent

  // Profile settings
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)

  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLogin            DateTime?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  // Relationships
  sentParcels            Parcel[]                 @relation("SenderParcels")
  receivedParcels        Parcel[]                 @relation("RecipientParcels")
  trackingHistory        TrackingHistory[]
  createdParcels         Parcel[]                 @relation("ParcelCreatedBy")
  updatedParcels         Parcel[]                 @relation("ParcelUpdatedBy")
  refreshToken           RefreshToken[]
  emailVerificationToken EmailVerificationToken[]
  notifications          Notification[]
  addressesCreated       Address[]                @relation("AddressCreatedBy")
  addressesUpdated       Address[]                @relation("AddressUpdatedBy")
  dimensionsCreated      Dimensions[]             @relation("DimensionsCreatedBy")
  dimensionsUpdated      Dimensions[]             @relation("DimensionsUpdatedBy")

  @@index([email]) // Index for faster email lookups
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model Address {
  id          String   @id @default(cuid())
  name        String
  email       String   // Used for non-registered recipients
  phone       String   // Used for non-registered recipients
  street      String
  city        String
  state       String
  zipCode     String
  country     String
  latitude    Float?   // For Google Maps marker
  longitude   Float?   // For Google Maps marker
  createdAt   DateTime?
  deletedAt   DateTime? // Soft delete
  createdBy   String?  // Admin or user who created the address
  updatedBy   String?  // Admin or user who last updated the address

  parcelsSender    Parcel[] @relation("SenderAddress")
  parcelsRecipient Parcel[] @relation("RecipientAddress")
  createdByUser    User?    @relation("AddressCreatedBy", fields: [createdBy], references: [id])
  updatedByUser    User?    @relation("AddressUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([email, phone]) // Ensure unique email/phone for non-registered recipients
  @@map("addresses")
}

model Dimensions {
  id        String    @id @default(cuid())
  length    Float
  width     Float
  height    Float
  unit      String
  deletedAt DateTime? // Soft delete
  createdBy String?   // Admin or user who created the dimensions
  updatedBy String?   // Admin or user who last updated the dimensions

  parcels        Parcel[] @relation
  createdByUser  User?    @relation("DimensionsCreatedBy", fields: [createdBy], references: [id])
  updatedByUser  User?    @relation("DimensionsUpdatedBy", fields: [updatedBy], references: [id])

  @@map("dimensions")
}

model Parcel {
  id             String       @id @default(cuid())
  trackingNumber String       @unique
  senderId       String
  recipientId    String?      // Optional for non-registered recipients
  basePrice      Float
  additionalFees Float?       @default(0)
  totalPrice     Float
  weight         Float?       // Weight for pricing
  weightUnit     String?      // e.g., "kg", "lb"
  deletedAt      DateTime?    // Soft delete

  dimensionsId       String?
  senderAddressId    String
  recipientAddressId String

  packageType        PackageType
  estimatedValue     Float?
  description        String?

  deliveryType       DeliveryType     @default(STANDARD)
  pickupDate         DateTime?
  deliveryDate       DateTime?
  estimatedDelivery  DateTime?
  actualDelivery     DateTime?

  status             ParcelStatus     @default(PROCESSING)

  fragile            Boolean          @default(false)
  perishable         Boolean          @default(false)
  hazardousMaterial  Boolean          @default(false)
  highValue          Boolean          @default(false)

  pickupInstructions   String?
  deliveryInstructions String?
  specialHandling      String?

  insuranceCoverage  InsuranceCoverage @default(NO_INSURANCE)
  signatureRequired  Boolean           @default(false)

  emailNotifications Boolean          @default(true)
  smsNotifications   Boolean          @default(false)

  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  createdBy          String?          // Admin who created the parcel
  updatedBy          String?          // Admin who last updated the parcel

  sender             User             @relation("SenderParcels", fields: [senderId], references: [id])
  recipient          User?            @relation("RecipientParcels", fields: [recipientId], references: [id])
  createdByUser      User?            @relation("ParcelCreatedBy", fields: [createdBy], references: [id])
  updatedByUser      User?            @relation("ParcelUpdatedBy", fields: [updatedBy], references: [id])
  trackingHistory    TrackingHistory[]
  deliveryAttempts   DeliveryAttempt[]
  dimensions         Dimensions?      @relation(fields: [dimensionsId], references: [id])
  senderAddress      Address          @relation("SenderAddress", fields: [senderAddressId], references: [id])
  recipientAddress   Address          @relation("RecipientAddress", fields: [recipientAddressId], references: [id])
  payments           Payment[]
  notifications      Notification[]

  @@index([trackingNumber]) // Index for search
  @@index([status])         // Index for filtering
  @@map("parcels")
}

model TrackingHistory {
  id          String       @id @default(cuid())
  parcelId    String
  status      ParcelStatus
  location    String?
  description String?
  timestamp   DateTime     @default(now())
  updatedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  parcel        Parcel   @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  updatedByUser User?    @relation(fields: [updatedBy], references: [id])

  @@map("tracking_history")
}

model DeliveryAttempt {
  id          String        @id @default(cuid())
  parcelId    String
  attemptDate DateTime      @default(now())
  status      AttemptStatus
  reason      String?
  nextAttempt DateTime?

  parcel      Parcel        @relation(fields: [parcelId], references: [id], onDelete: Cascade)

  @@map("delivery_attempts")
}

model Notification {
  id          String             @id @default(cuid())
  parcelId    String?
  userId      String?
  type        NotificationType   // EMAIL or SMS
  status      NotificationStatus // SENT, FAILED, PENDING
  message     String?            // Notification content or error message
  sentAt      DateTime?
  queuedAt    DateTime?          // When notification was queued
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  parcel      Parcel?            @relation(fields: [parcelId], references: [id])
  user        User?              @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Payment {
  id                    String        @id @default(cuid())
  stripePaymentIntentId String        @unique
  amount                Float
  currency              String
  status                PaymentStatus // Use enum for consistency
  parcelId              String?
  parcel                Parcel?       @relation(fields: [parcelId], references: [id])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("payments")
}

enum Role {
  USER
  ADMIN
  COURIER
}

enum ParcelStatus {
  PROCESSING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  DELAYED
  RETURNED
  CANCELLED
}

enum PackageType {
  STANDARD_BOX
  DOCUMENT
  CLOTHING
  ELECTRONICS
  FRAGILE
  LIQUID
  PERISHABLE
}

enum DeliveryType {
  STANDARD
  EXPRESS
  SAME_DAY
  OVERNIGHT
}

enum InsuranceCoverage {
  NO_INSURANCE
  BASIC_COVERAGE
  PREMIUM_COVERAGE
  CUSTOM_COVERAGE
}

enum AttemptStatus {
  SUCCESSFUL
  FAILED_NO_ONE_HOME
  FAILED_INCORRECT_ADDRESS
  FAILED_REFUSED
  FAILED_OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum NotificationType {
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}